1. The code snippet contains Disjkastra algorithm which is used to find the shortest path of a weighted directed graphs. Here i have taken a list named distance to store the distance of the vertex from the source. Initially every index of the distance list has been populated with the value infinity. Heapq has been used to create a min heap Queue which will return the value of miniumum vertex every time it will be popped. Than a if condition is given to check the shortest path and store it in the distance list. The time complexity of Dijkstra's algorithm is O((V+E)logV), where V is the number of vertices and E is the number of edges in the graph. This is because the algorithm iterates over all vertices and edges, and for each vertex, it performs heap operations (push and pop) which take O(logV) time. Therefore, the overall time complexity of the code snippet is O((V+E)logV).

2. The code snippet contains the same code as Dijkstra alogritm but it hase been called twice to check the common node to be reached and the max time to be reached in the common node. The overall time complexity will be same as the previous one. O((V+E)logV)

3. The code snippet contains the application of Disjoint set Union  data structure. Here the find() function is defined to find the parent of certain node. and Union function is defined to join the friends group and return friends size of every query. the overll time complexity of the code is o(n) , where n is the number of qureries.

4. The code snippet contians the application of Kruskal's algorithm. Where disjoint set data structure is used to find the minimum cost of the spanning trees.The time complexity of the code is O(ElogE), where E is the number of edges in the graph. This is because the algorithm sorts the edges based on their weights, which takes O(ElogE) time. Then, it iterates through all the edges and performs the union-find operations, which take O(logE) time in the worst case. Therefore, the overall time complexity of the code snippet is O(ElogE).